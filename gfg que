1. frequency of elemnt in a sorted array.

#include <iostream>
using namespace std;
void freq(int arr[] ,int n){
    int i=1;
    int freq=1;
    while(i < n){
        while(i < n && arr[i] == arr[i-1]){
            freq++;
            i++;
        }
        cout<<arr[i-1]<<" "<<freq<<endl;
        freq =1;
        i++;
    
        if(n==1 && arr[n-1] != arr[n-2]){
            cout<<arr[n-1]<<" "<<1;
        }
    }
}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    freq(arr,n);
    // 
	// your code goes here
	return 0;
}
///////





2. maximum differnce.

#include <iostream>
using namespace std;
int maxdiff(int arr[] ,int n){
  int minval =arr[0];
  int res= arr[1]-arr[0];
  for(int i=0;i<n;i++){
      res = max(res , arr[i] - minval);
      minval = min(minval ,arr[i]);
  }
  return res;
  
}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<maxdiff(arr,n);
    // 
	// your code goes here
	return 0;
}


//////////

3 . buy and sell

#include <iostream>
using namespace std;
int prof(int arr[] ,int n){
int profit = 0;
for(int i=1;i<n;i++){
    if(arr[i] >arr[i-1]){
        profit += arr[i] - arr[i-1];
    }
}
  return profit;
}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<prof(arr,n);
    // 
	// your code goes here
	return 0;
}
/////
4 Rainwater trapping
#include <iostream>
using namespace std;
int prof(int arr[] ,int n){
   int res = 0;
   int left[n];
   int right[n];
   left[0] =arr[0];
   for(int i=1;i<n;i++){
       left[i] = max(left[i-1] , arr[i]);
   }

     right[n-1] =arr[n-1];
   for(int i=n-2;i>=0;i--){
       right[i] = max(right[i+1] , arr[i]);
   }
    for(int i=0;i<n;i++){
        res += min(left[i],right[i]) - arr[i];
    }
    return res;
}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<prof(arr,n);
    // 
	// your code goes here
	return 0;
}


/////



5. maximum consecutive 1 in bINARY ARRAY



#include <iostream>
using namespace std;
int prof(int arr[] ,int n){
  int curr=0;
  int res = 0;
  for(int i=0;i<n;i++){
      if(arr[i] == 1){
          curr++;
          res = max(res,curr);
      }
      else{
          curr = 0;
      }
  }
  return res;
}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<prof(arr,n);
   
	return 0;
}







////
6 Kadane's ALGO





#include <iostream>
#include<climits>
using namespace std;
int kadan(int arr[] ,int n){
int maxi = INT_MIN;
int sum=0;
for(int i=0;i<n;i++)
{   
    sum = sum+arr[i];
     maxi = max(sum , maxi);


    if(sum <0)
    {sum=0;
}
    
}
return maxi;
    
}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<kadan(arr,n);
   
	return 0;
}






///////////////////
7 . Maximum length of even odd;


#include <iostream>
#include<climits>
using namespace std;
int evenOdd(int arr[] ,int n){
int count = 1;
int res=1;
for(int i=0;i<n;i++){
    if(arr[i]%2 == 0  && arr[i-1]%2 == 0   || arr[i]%2 !=0 && arr[i-1]%2 !=0)
    {count++;
    res = max(res , count);
}
else{
    count = 1;
}

}
return res;
    
}


int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<evenOdd(arr,n);
   
	return 0;
}




//////////////////

8 Maximum circular subarray sum
#include <iostream>
#include<climits>
#include<bits/stdc++.h>
using namespace std;
int kadane(int arr[] ,int n){
int sum =0;
int res =INT_MIN;
for(int i=0;i<n;i++){
    sum=sum+arr[i];
    res = max(res , sum);
    if(sum < 0){
        sum=0;
    }
}
return res;
}
int wrapsum(int arr[] ,int n){
      
    
    int total=0;
    int wrpsum=0;
    
    int non_wrapsum = kadane(arr,n);
    // if(non_wrapsum <0)
    // return non_wrapsum;
    
    for(int i=0;i<n;i++){
        total = total + arr[i];
        arr[i] = - arr[i];
    }
    wrpsum = total + kadane(arr,n);
return max(wrpsum ,non_wrapsum);
    
}






int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
  cout<<wrapsum(arr,n);
   
	return 0;
}






9 -   Majority elements


#include <iostream>
#include<climits>
#include<bits/stdc++.h>
using namespace std;
int findmax(int arr[],int n){
    int count = 1;
    int res = 0;
    for(int i=0;i<n;i++){
        if(arr[count] == arr[i]){
            count++;
        }
        else{
            count--;
        }
        
        if(count == 0){
            count =1;
            res =i;
        }
    }



count =0;
for(int i=0;i<n;i++){
    if(arr[res] == arr[i])
    count++;
}
if(count > n/2){
    cout<<arr[res];
}    
return -1;    
    
    

}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
 findmax(arr,n);
   
	return 0;
}











//////////////
10. Minimum number of flips req

#include <iostream>
#include<climits>
#include<bits/stdc++.h>
using namespace std;
int findmax(int arr[],int n){
 for(int i=1;i<n;i++){
     if(arr[i] != arr[i-1])
     {
         if(arr[i] != arr[0])
         {
             cout<<"from"<<i<<"to";
         }
         else{
             cout<<i-1<<endl;
         }
     }

 if(arr[n-1] != arr[0]){
     cout<<n-1;
 }
 
 }
    

}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
 findmax(arr,n);
   
	return 0;
}
